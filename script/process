#!/usr/bin/env ruby
#/ Usage: ./script/process [options] farming-engineers-time.csv

require 'optparse'
require 'yaml'

require_relative "../lib/name_completer"
require_relative "../lib/timesheets"

def main(options)
  input_file = options.fetch(:input_file)

  parsed = read_input(input_file, options)
  all_entries = parsed.entries
  all_tasks = parsed.tasks
  errors = options[:nowarn] ? [] : validate(all_entries)

  if errors.any?
    puts "#{input_file} is not valid."
    errors.each do |error|
      puts "ERROR: #{error}"
    end
    exit 2 unless options[:force]
  end

  per_employee = split_entries(all_entries)
  per_employee.sort_by(&:first).each do |employee|
    report_employee(employee)
  end
  report_total_hours(per_employee.values)

  assigned = hours_per_day(all_entries)
  known, unknown = all_tasks.partition { |task| task[:hours] }
  known.each do |task|
    task_day = task[:date]
    hours_for_day = assigned[task_day]
    hours_for_task = task[:hours]
    assigned[task[:name]] += hours_for_task
    if hours_for_day < hours_for_task
      assigned.delete task_day
    else
      assigned[task_day] -= hours_for_task
    end
  end
  unknown.group_by { |task| task[:date] }.each do |date, tasks|
    hours_per = assigned.delete(date).to_f / tasks.size
    tasks.each do |task|
      assigned[task[:name]] += hours_per
    end
  end
  puts YAML.dump(assigned)

rescue Errno::ENOENT => e
  puts "#$0: #{e.message}"
  exit 1

end

def parse_options!
  parsed = {}
  opts = OptionParser.new do |opts|
    opts.banner = File.read(__FILE__).lines.select { |line| line =~ /^#\// }.map { |line| line[3..-1].chomp }.join("\n") + "\n\n"

    opts.on "--no-warn", "Don't report errors and process anyway" do
      parsed[:nowarn] = true
    end

    opts.on "-f", "--force", "Process even if there are errors" do
      parsed[:force] = true
    end

    opts.on "-v", "--verbose", "Log the parse steps to stderr" do
      parsed[:verbose] = true
    end

    opts.on "-h", "--help", "Show this message" do
      puts opts
      exit 0
    end
  end
  opts.parse!
  if ARGV.size != 1
    $stderr.puts opts
    exit 1
  end
  parsed[:input_file] = ARGV[0]
  parsed
end

# Reads entries from a file.
#
# Argument: path to input file.
#
# Return: array of hashes. Each hash has keys :start, :end, :name
#/
#/ input looks like this:
#/
#/    9/2
#/    Joe Bob 7:52 8:19
#/    9/3
#/    Job Bob 7:55-9:30
#/    Mel Adams 8:01 9:01
#/
#/ or this
#/
#/    Joe Bob
#/    9/2 7:52-8:19
#/    9/3 7:55 9:30
#/
#/    Mel Adams
#/    9/3 8:01 9:01
#/
#/ or, with employees.yml like this
#/
#/    employees:
#/    - Joe Bob
#/    - Mel Adams
#/
#/ and input like this
#/
#/    Joe 7:52 - 8:19
def read_input(path, options)
  config = YAML.load(File.read(File.expand_path("../employees.yml", File.dirname(__FILE__))))

  parse_opts = {}
  parse_opts[:log] = $stderr if options[:verbose]
  parse_opts[:names] = NameCompleter.new(:full_names => config["employees"])

  File.open(path) do |f|
    Timesheets.parse_raw(f, parse_opts)
  end
end

# Checks that all the entries are within two weeks of each other.
def validate(entries)
  first = last = nil
  errors = []
  entries.each do |entry|
    if entry[:end] < entry[:start]
      errors << "#{entry[:raw]} has its end before its start."
    end
    first = entry[:start] if first.nil? || first > entry[:start]
    last  = entry[:end]   if last.nil?  || last  < entry[:end]
  end
  if last && first && last - first > 14*24*60*60 # 14 days
    errors << "Time entries span more than two weeks! from #{first} to #{last}"
  end
  errors
end

# Splits entries per employee.
def split_entries(entries)
  per_employee = Hash.new { |h,k| h[k] = [] }
  entries.each do |entry|
    per_employee[entry[:name]] << entry
  end
  per_employee
end

# Accumulates hours per date.
def hours_per_day(entries)
  hours_per_day = Hash.new(0.0)
  entries.each do |entry|
    hours_per_day[entry[:start].to_date] += (entry[:end] - entry[:start]) / 3600.0
  end
  hours_per_day
end

# Reports someone's time for the two weeks.
#/
#/ output looks like this:
#/
#/    Job Bob 1.30 hours
#/    Mel Adams 1.00 hours
def report_employee(employee)
  name, entries = *employee
  printf "%s %.2f hours\n", name, total(entries)
end

# Report the total times for the two weeks.
#/    TOTAL 2.30
def report_total_hours(all_entries)
  printf "TOTAL %.2f\n", total(all_entries.flatten)
end

# Add up the hours from the given entries.
def total(entries)
  seconds = entries.inject(0) { |sum, entry| sum + (entry[:end] - entry[:start]) }
  hours = seconds / 3600
end

main(parse_options!)

# vim:ft=ruby
