#!/usr/bin/env ruby
#/ Usage: ./script/process [options] farming-engineers-time.csv

require 'optparse'

require_relative "../lib/timesheets"

def main(options)
  input_file = options.fetch(:input_file)

  all_entries = read_input(input_file, options)
  errors = validate(all_entries)

  if errors.any?
    puts "#{input_file} is not valid.", errors
  else
    per_employee = split_entries(all_entries)
    per_employee.each do |employee|
      report_employee(employee)
    end
  end

rescue Errno::ENOENT => e
  puts "#$0: #{e.message}"
  exit 1

end

def parse_options!
  parsed = {}
  opts = OptionParser.new do |opts|
    opts.banner = File.read(__FILE__).lines.select { |line| line =~ /^#\// }.map { |line| line[3..-1].chomp }.join("\n") + "\n\n"

    opts.on "-v", "--verbose", "Log the parse steps to stderr" do
      parsed[:verbose] = true
    end

    opts.on "-h", "--help", "Show this message" do
      puts opts
      exit 0
    end
  end
  opts.parse!
  if ARGV.size != 1
    puts opts
    exit 1
  end
  parsed[:input_file] = ARGV[0]
  parsed
end

# Reads entries from a file.
#
# Argument: path to input file.
#
# Return: array of hashes. Each hash has keys :start, :end, :name
#/
#/ input looks like this:
#/
#/    9/2
#/    Joe Bob 7:52 8:19
#/    9/3
#/    Job Bob 7:55-9:30
#/    Mel Adams 8:01 9:01
#/
#/ or this
#/
#/    Joe Bob
#/    9/2 7:52-8:19
#/    9/3 7:55 9:30
#/
#/    Mel Adams
#/    9/3 8:01 9:01
def read_input(path, options)
  parse_opts = {}
  parse_opts[:log] = $stderr if options[:verbose]
  File.open(path) do |f|
    Timesheets.parse_raw(f, parse_opts)
  end
end

# Checks that all the entries are within two weeks of each other.
def validate(entries)
  first = last = nil
  errors = []
  entries.each do |entry|
    if entry[:end] < entry[:start]
      errors << "#{entry[:raw]} has its end before its start."
    end
    first = entry[:start] if first.nil? || first > entry[:start]
    last  = entry[:end]   if last.nil?  || last  < entry[:end]
  end
  if last && first && last - first > 14*24*60*60 # 14 days
    errors << "Time entries span more than two weeks! from #{first} to #{last}"
  end
  errors
end

# Splits entries per employee.
def split_entries(entries)
  per_employee = Hash.new { |h,k| h[k] = [] }
  entries.each do |entry|
    per_employee[entry[:name]] << entry
  end
  per_employee
end

# Reports someone's time for the two weeks.
#/
#/ output looks like this:
#/
#/    Job Bob 1.30 hours
#/    Mel Adams 1.00 hours
def report_employee(employee)
  name, entries = *employee
  seconds = entries.inject(0) { |sum, entry| sum + (entry[:end] - entry[:start]) }
  hours = seconds / 3600
  printf "%s %.2f hours\n", name, hours
end

main(parse_options!)

# vim:ft=ruby
