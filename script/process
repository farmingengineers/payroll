#!/usr/bin/env ruby
#/ Usage: ./script/process farming-engineers-time.csv

require 'date'

def main(input_file)
  all_entries = read_input(input_file)
  errors = validate(all_entries)
  if errors.any?
    puts "#{input_file} is not valid.", errors
  else
    per_employee = split_entries(all_entries)
    per_employee.each do |employee|
      report_employee(employee)
    end
  end
end

# Reads entries from a file.
#
# Argument: path to input file.
#
# Return: array of hashes. Each hash has keys :start, :end, :name
#/
#/ input looks like this:
#/
#/    9/2
#/    Joe Bob 7:52 8:19
#/    9/3
#/    Job Bob 7:55-9:30
#/    Mel Adams 8:01 9:01
def read_input(path)
  entries = []
  File.open(path) do |f|
    current_date = nil
    while line = (f.readline rescue nil)
      line = line.strip
      if line =~ /^[0-9\/-]+$/
        current_date = Date.parse(line)
      elsif line =~ /^(.*)\s+(\d{1,2}):(\d{1,2})[\s-]+(\d{1,2}):(\d{1,2})$/
        entry = { :raw => line }
        _, name, shr, smin, ehr, emin = $~.to_a
        entry[:name] = name
        entry[:start] = current_date.to_time + 60 * (smin.to_i + (60 * shr.to_i))
        entry[:end]   = current_date.to_time + 60 * (emin.to_i + (60 * ehr.to_i))
        entries << entry
      end
    end
  end
  entries
end

# Checks that all the entries are within two weeks of each other.
def validate(entries)
  first = last = nil
  errors = []
  entries.each do |entry|
    if entry[:end] < entry[:start]
      errors << "#{entry[:raw]} has its end before its start."
    end
    first = entry[:start] if first.nil? || first > entry[:start]
    last  = entry[:end]   if last.nil?  || last  < entry[:end]
  end
  if last && first && last - first > 14*24*60*60 # 14 days
    errors << "Time entries span more than two weeks! from #{first} to #{last}"
  end
  errors
end

# Splits entries per employee.
def split_entries(entries)
  per_employee = Hash.new { |h,k| h[k] = [] }
  entries.each do |entry|
    per_employee[entry[:name]] << entry
  end
  per_employee
end

# Reports someone's time for the two weeks.
#/
#/ output looks like this:
#/
#/    Job Bob 1.30 hours
#/    Mel Adams 1.00 hours
def report_employee(employee)
  name, entries = *employee
  seconds = entries.inject(0) { |sum, entry| sum + (entry[:end] - entry[:start]) }
  hours = seconds / 3600
  printf "%s %.2f hours\n", name, hours
end

if ARGV.size != 1 || !File.exists?(ARGV[0])
  system "cat #{__FILE__} | grep ^#/ | cut -c4-"
  exit 1
end

main(*ARGV)

# vim:ft=ruby
